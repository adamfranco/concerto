<?
// :: Version: $Id$

require_once(HARMONI."/oki2/shared/ConfigurationPropertiesType.class.php");


// :: set up the $harmoni object :: 
	$harmoni->config->set("useAuthentication",false);
	$harmoni->config->set("defaultModule","home");
	$harmoni->config->set("defaultAction","welcome");
	$harmoni->config->set("charset","utf-8");
	$harmoni->config->set("outputHTML",true);
	$harmoni->config->set("sessionName","PHPSESSID");
	$harmoni->config->set("sessionUseCookies",true);
	$harmoni->config->set("sessionCookiePath","/");
	$harmoni->config->set("sessionCookieDomain","middlebury.edu");

// :: setup the ActionHandler ::
	function callback_action(&$harmoni) {
		return $harmoni->pathInfoParts[0] . "." . $harmoni->pathInfoParts[1];
	}
	$harmoni->setActionCallbackFunction( "callback_action" );
	$harmoni->ActionHandler->addActionSource(	
				new FlatFileActionSource(realpath(MYDIR."/main/modules"), 
										 ".act.php"));
	$harmoni->ActionHandler->addActionSource(	
				new FlatFileActionSource(realpath(POLYPHONY."/main/modules"), 
										 ".act.php"));
	

// :: Set up the database connection ::
	$dbHandler=&Services::requireService("DBHandler");
	$dbName = "adam_concerto";
	$dbID = $dbHandler->addDatabase( new MySQLDatabase("localhost", $dbName,"test","test") );
	$dbHandler->pConnect($dbID);
	unset($dbHandler); // done with that for now

// :: Set up the IdManager as this is required for the ID service ::
	Services::startService("Id", $dbID, $dbName);
	Services::startService("Agent", $dbID, $dbName);

// :: Start the AuthenticationManager OSID Impl.
	Services::startService("AuthN");
	
	$authNManager =& Services::getService("AuthN");
	$configuration =& new HarmoniProperties(new ConfigurationPropertiesType);
	$tokenCollectors = array(
//		serialize(new Type ("Authentication", "Middlebury College", "Concerto DB")) 
//			=> new BasicFormNamePassTokenCollector,
		serialize(new Type ("Authentication", "Middlebury College", "Concerto DB")) 
			=> new FormActionNamePassTokenCollector(MYURL."/auth/username_password_form/".implode("/",$harmoni->pathInfoParts)),
	);
	$configuration->addProperty('token_collectors', $tokenCollectors);
	$authNManager->assignConfiguration($configuration);
	
// :: Start and configure the AuthenticationMethodManager
	Services::startService("AuthNMethods");
	$authNMethodManager =& Services::getService("AuthNMethods");
	
	// set up a Database Authentication Method
	require_once(HARMONI."/oki2/agentmanagement/AuthNMethods/SQLDatabaseAuthNMethod.class.php");
	require_once(HARMONI."/oki2/agentmanagement/AuthNMethods/SQLDatabaseMD5UsernamePasswordAuthNTokens.class.php");
	$authType =& new Type ("Authentication", "Middlebury College", "Concerto DB");
	$configuration =& new HarmoniProperties(new ConfigurationPropertiesType);
	$configuration->addProperty('tokens_class', $arg0 = 'SQLDatabaseMD5UsernamePasswordAuthNTokens');
	$configuration->addProperty('database_id', $dbID);
	$configuration->addProperty('authentication_table', $arg2 = 'auth_db_user');
	$configuration->addProperty('username_field', $arg3 = 'username');
	$configuration->addProperty('password_field', $arg4 = 'password');
	$propertiesFields = array(
		'username' => 'username',
		'name'=> 'display_name',
	);
	$configuration->addProperty('properties_fields', $propertiesFields);
	unset($arg0, $arg1, $arg2, $arg3, $arg4, $propertiesFields);
	
	
	$authNMethodManager->addAuthNMethodWithType(
		new SQLDatabaseAuthNMethod($configuration),
		$authType);
	
	// set up LDAPAuthentication Method
	require_once(HARMONI."/oki2/agentmanagement/AuthNMethods/LDAPAuthNMethod.class.php");
	require_once(HARMONI."/oki2/agentmanagement/AuthNMethods/LDAPAuthNTokens.class.php");	
	$authType =& new Type ("Authentication", "Middlebury College", "Middlebury LDAP");
	$configuration =& new HarmoniProperties(new ConfigurationPropertiesType);
	$configuration->addProperty('tokens_class', $arg0 = 'LDAPAuthNTokens');
	$configuration->addProperty("LDAPHost", $arg1 = "ad.middlebury.edu");
	$configuration->addProperty("baseDN", $arg2 = "cn=users,dc=middlebury,dc=edu");
	$configuration->addProperty("bindDN", $arg3 = "juser");
	$configuration->addProperty("bindDNPassword", $arg4 = "poi987");
	$propertiesFields = array (
		'username' => 'samaccountname',
		'name' =>  'displayname',
		'first name' =>  'givenname',
		'last name' =>  'sn',
		'department' =>  'department',
		'email' =>  'mail',
	);
	$configuration->addProperty('properties_fields', $propertiesFields);
	$loginFields = array (
		'samaccountname', 
		'mail',
		'cn',
	);
	$configuration->addProperty('login_fields', $loginFields);
	unset($arg0, $arg1, $arg2, $arg3, $arg4, $propertiesFields, $loginFields);
	
	$authNMethodManager->addAuthNMethodWithType(
		new LDAPAuthNMethod($configuration),
		$authType);
	

// :: Agent-Token Mapping Manager ::
	Services::startService("AgentTokenMapping");
	$mappingManager =& Services::getService("AgentTokenMapping");
	
	// Configure the mapping manager
	$configuration =& new HarmoniProperties(new ConfigurationPropertiesType);
	$configuration->addProperty('database_id', $dbID);
	$mappingManager->assignConfiguration($configuration);


// :: Layout and Theme Setup ::
	Services::registerService("Themes", "ThemeHandler");
	Services::startService("Themes");
	$harmoni->setTheme(new SimpleLinesTheme);


// :: Set up language directories ::
	Services::startService('Lang');
	$langLoc =& Services::getService ('Lang');
	$langLoc->addApplication('concerto', MYDIR.'/main/languages');
	$langLoc->addApplication('polyphony', POLYPHONY.'/main/languages');
//	$langLoc->setLanguage("es_ES");
//	$langLoc->setLanguage("en_US");
//	$languages =& $langLoc->getLanguages();
//  printpre($languages);


// :: Set up the DataManager ::
	DataManager::setup($dbID);

// :: Set up the Hierarchy Manager ::
	Services::startService("Hierarchy", $dbID, $dbName);

// :: Set up the RepositoryManager ::
	$repositoryHierarchyId = "673";
	$defaultParentId = "301";
	$configuration = array(
		"hierarchyId" => $repositoryHierarchyId,
		"versionControlAll" => TRUE,
		"dbId" => $dbID,
		"defaultParentId" => $defaultParentId,
		"use_filesystem_for_files" => TRUE,
		"file_data_path" => "/www/afranco/concerto_data",
	);
	
	Services::startService("Repository", $configuration);
	
/************************************************************************
 * To convert from database Storage of files to filesystem storage,
 * set all of the configuration needed for both except the switch for which
 * system to use. Keep that at its original value. Then uncomment the following
 * lines and set the values to the desired ones.
 */
//  	$idManager =& Services::getService("Id");
//  	$repositoryManagaer =& Services::getService("Repository");
//  	
// 	$destinationRecordClass = "FileSystemFileRecord";
// 	$recordStructureOfBothRecords =& $idManager->getId("FILE");
// 	
// 	$repositoriesToConvert =& $repositoryManagaer->getRepositories();
// 	while ($repositoriesToConvert->hasNextRepository()) {
// 		$repository =& $repositoriesToConvert->nextRepository();
// 		
// 		$repositoryId =& $repository->getId();
// 		print "\n<br/>Converting Repository: ".$repositoryId->getIdString();
// 		
// 		$repository->convertRecords($recordStructureOfBothRecords, $destinationRecordClass);
// 	}
/************************************************************************/

// :: Set up the Authorization System ::
	Services::startService("AuthZ", $dbID, $dbName);
	
// :: Set up the Sets Manager ::
	Services::startService("Sets", $dbID);

// ::Specify some Ids for concerto ::
	if (!is_array($_SESSION['concerto_config'])) {
		$_SESSION['concerto_config'] = array();
		$idManager =& Services::getService("Id");
		$_SESSION['concerto_config']['media_file_structure_id'] = $idManager->getId("1097");
		$_SESSION['concerto_config']['thumbnail_part_id'] = $idManager->getId("1104");
	}
	
// :: Set up the MIME service for sniffing mime types ::
	Services::startService("MIME");

	
// :: Set up the ImageProcessor service for generating thumbnails ::
	Services::startService("ImageProcessor",
							"image/jpeg",		// thumbnail format
					
					//  ------ GD options ------		
							FALSE,				// use GD libraries
							array(),			// GD Formats
				
					//  ------ ImageMagick options ------
							TRUE,				// Use ImageMagick
							"/usr/X11R6/bin",	// ImageMagick path
							"/tmp"				// ImageMagick temp dir
	);


// :: Set up definitions for the Authorization Functions Used in Concerto ::
// $authZ =& Services::getService("AuthZ");
// $id =& Services::getService("Id");
// $viewFunc =& $authZ->getFunction($id->getId('178'));
// $funcType =& $viewFunc->getFunctionType();
// $newId =& $id->createId();
// print $newId->getIdString();
// $hId =& $id->getId('673');
// $authZ->createFunction($newId, "Access", "Access this and its children.", $funcType, $hId);

/*********************************************************
 * View/Use AZs
 *********************************************************/
// Can this qualifier and its children be accessed?
define("AZ_ACCESS", '331');

// Can a qualifier be viewed?
define("AZ_VIEW", '178');

// Can a qualifier be commented on?
define("AZ_COMMENT", '179');

/*********************************************************
 * Editing AZs
 *********************************************************/
// Can a qualifier be edited?
define("AZ_EDIT", '175');

// Can a qualifier be deleted?
define("AZ_DELETE", '177');

// Can a a child be added to this qualifier?
define("AZ_ADD_CHILDREN", '176');

/*********************************************************
 * Administration AZs
 *********************************************************/
 // Can the AZs of a qualifier be viewed?
define("AZ_VIEW_AZS", '292');

 // Can the AZs of a qualifier be modified?
define("AZ_MODIFY_AZS", '293');

 // Can agents be created here?
define("AZ_CREATE_AGENTS", '294');

 // Can agent properties be modified here?
define("AZ_MODIFY_AGENTS", '295');

 // Can agents be deleted here?
define("AZ_DELETE_AGENTS", '296');

 // Can groups be created here?
define("AZ_CREATE_GROUPS", '297');

 // Can groups properties be modified here?
define("AZ_MODIFY_GROUPS", '298');

 // Can groups be deleted here?
define("AZ_DELETE_GROUPS", '299');

/*********************************************************
 * Hierarchy Ids
 *********************************************************/
 // Digital Repository Id
 define("REPOSITORY_NODE_ID", $defaultParentId);
 
//  
// $agentManager =& Services::getService("Agent");
// $idManager =& Services::getService("Id");
// $agentManager->deleteGroup($idManager->getId("410"));
// $groupType =& new Type ("System", "Concerto", "SystemGroups", "Groups for administrators and others with special privledges.");
// $nullType =& new Type ("System", "Concerto", "NULL");
// $properties =& new HarmoniProperties($nullType);
// $agentManager->createGroup("Auditors", $groupType, "Users that can view all content in the system but not modify it.", $properties);