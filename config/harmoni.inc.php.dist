<?
/**
 * The main configuration file.
 *
 * @package concerto.config
 * 
 * @copyright Copyright &copy; 2005, Middlebury College
 * @license http://www.gnu.org/copyleft/gpl.html GNU General Public License (GPL)
 *
 * @version $Id$
 */

require_once(HARMONI."/oki2/shared/ConfigurationProperties.class.php");
require_once(OKI2."/osid/OsidContext.php");


// :: set up the $harmoni object :: 
	$harmoni->config->set("defaultModule","home");
	$harmoni->config->set("defaultAction","welcome");
	$harmoni->config->set("sessionName","PHPSESSID");
	$harmoni->config->set("sessionUseCookies",true);
	$harmoni->config->set("sessionCookiePath","/");
	$harmoni->config->set("sessionCookieDomain","middlebury.edu");
	
	// tell harmoni to post-process all actions with this specified action.
	// the action takes the result from previous actions and builds a display
	// screen from it.
	
	// until polyphony has been updated to use this functionality, we must ignore
	// it.
	$postProcessIgnoreList = array(
									"agents.*",
									"authorization.*",
									"language.*",
									"repository.*",
									
									// and our special no-theme action
									"example.no_theme"
								);
	
	$harmoni->setPostProcessAction("window.display", $postProcessIgnoreList);
	
	$context =& new OsidContext;
	$context->assignContext('harmoni', $harmoni);


/******************************************************************************
 * Set up the ActionHandler
 *
 * The ActionHandler provides a logical navigation-control system
 ******************************************************************************/
 
 	// First we need to assign a RequestHandler to Harmoni for generating URLs, 
 	// getting request data (ie, $_REQUEST variables) from the browser, and getting
 	// the requested module/action pair.
 
 	// the GETMethodRequestHandler uses standard GET query strings for information
 	// transfer.
 	require_once(HARMONI."/architecture/request/GETMethodRequestHandler.class.php");
	$harmoni->request->assignRequestHandler( new GETMethodRequestHandler() );
	
	// Next we need to tell the ActionHandler where to find our modules/actions
	// and what type those are (FlatFile-Actions, ClassMethod-Actions, or
	// Class-Actions.
	$harmoni->ActionHandler->addActionSource(	
				new ClassesActionSource(realpath(MYDIR."/main/modules"), 
										 ".act.php", "Action"));
	// Our Authentication and Language-switching actions are already written
	// and reside in the Polyphony package:
	$harmoni->ActionHandler->addActionSource(	
				new FlatFileActionSource(realpath(POLYPHONY."/main/modules"), 
										 ".act.php"));
	

// :: Set up the DatabaseManager ::
	$configuration =& new ConfigurationProperties;
	Services::startManagerAsService("DatabaseManager", $context, $configuration);
	
	//Set up the database connection
	$databaseManager =& Services::getService("DatabaseManager");
	$dbName = "adam_concerto";
	$dbID = $databaseManager->addDatabase( new MySQLDatabase("localhost", $dbName,"test","test") );
	$databaseManager->pConnect($dbID);
	unset($databaseManager); // done with that for now


// :: Set up the IdManager as this is required for the ID service ::
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('database_index', $dbID);
	$configuration->addProperty('database_name', $dbName);
	$configuration->addProperty('id_prefix', $arg0 = 'dev_id-');
	unset($arg0);
	Services::startManagerAsService("IdManager", $context, $configuration);
	
	
// :: Set up the AgentManager ::
	$configuration =& new ConfigurationProperties;
	// default agent Flavor is one that can be editted
	$agentFlavor="HarmoniEditableAgent";
	
	$configuration->addProperty('database_index', $dbID);
	$configuration->addProperty('database_name', $dbName);
	$configuration->addProperty('defaultAgentFlavor', $agentFlavor);
	Services::startManagerAsService("AgentManager", $context, $configuration);

// :: Set up PropertyManager ::
	//the property manager operates in the same context as the AgentManager and is more or less an adjunct to it
	Services::startManagerAsService("PropertyManager", $context, $configuration);


// :: Start the AuthenticationManager OSID Impl.
	$configuration =& new ConfigurationProperties;
	$tokenCollectors = array(
//		serialize(new Type ("Authentication", "Middlebury College", "Concerto DB")) 
//			=> new BasicFormNamePassTokenCollector,
		serialize(new Type ("Authentication", "Middlebury College", "Concerto DB")) 
			=> new FormActionNamePassTokenCollector($harmoni->request->quickURL("auth","username_password_form")),
	);
	$configuration->addProperty('token_collectors', $tokenCollectors);
	Services::startManagerAsService("AuthenticationManager", $context, $configuration);


// :: Start and configure the AuthenticationMethodManager
	$configuration =& new ConfigurationProperties;
	
		// set up a Database Authentication Method
		require_once(HARMONI."/oki2/agentmanagement/AuthNMethods/SQLDatabaseAuthNMethod.class.php");
		require_once(HARMONI."/oki2/agentmanagement/AuthNMethods/SQLDatabaseMD5UsernamePasswordAuthNTokens.class.php");
		$dbAuthType =& new Type ("Authentication", "Middlebury College", "Concerto DB");
		$dbMethodConfiguration =& new ConfigurationProperties;
		$dbMethodConfiguration->addProperty('tokens_class', $arg0 = 'SQLDatabaseMD5UsernamePasswordAuthNTokens');
		$dbMethodConfiguration->addProperty('database_id', $dbID);
		$dbMethodConfiguration->addProperty('authentication_table', $arg2 = 'auth_db_user');
		$dbMethodConfiguration->addProperty('username_field', $arg3 = 'username');
		$dbMethodConfiguration->addProperty('password_field', $arg4 = 'password');
		$propertiesFields = array(
			'username' => 'username',
//			'name'=> 'display_name',
		);
		$dbMethodConfiguration->addProperty('properties_fields', $propertiesFields);
		
		$dbAuthNMethod =& new SQLDatabaseAuthNMethod;
		$dbAuthNMethod->assignConfiguration($dbMethodConfiguration);
		unset($arg0, $arg1, $arg2, $arg3, $arg4, $propertiesFields, $dbMethodConfiguration);
		
	$configuration->addProperty($dbAuthType, $dbAuthNMethod);
	
	$GLOBALS["NewUserAuthNType"] =& $dbAuthType;
		
		// set up LDAPAuthentication Method
// 		require_once(HARMONI."/oki2/agentmanagement/AuthNMethods/LDAPAuthNMethod.class.php");
// 		require_once(HARMONI."/oki2/agentmanagement/AuthNMethods/LDAPAuthNTokens.class.php");	
// 		$ldapAuthType =& new Type ("Authentication", "Middlebury College", "Middlebury LDAP");
// 		$ldapConfiguration =& new ConfigurationProperties;
// 		$ldapConfiguration->addProperty('tokens_class', $arg0 = 'LDAPAuthNTokens');
// 		$ldapConfiguration->addProperty("LDAPHost", $arg1 = "ad.middlebury.edu");
// 		$ldapConfiguration->addProperty("baseDN", $arg2 = "cn=users,dc=middlebury,dc=edu");
// 		$ldapConfiguration->addProperty("bindDN", $arg3 = "juser");
// 		$ldapConfiguration->addProperty("bindDNPassword", $arg4 = "poi987");
// 		$propertiesFields = array (
// 			'username' => 'samaccountname',
// 			'name' =>  'displayname',
// 			'first name' =>  'givenname',
// 			'last name' =>  'sn',
// 			'department' =>  'department',
// 			'email' =>  'mail',
// 		);
// 		$ldapConfiguration->addProperty('properties_fields', $propertiesFields);
// 		$loginFields = array (
// 			'samaccountname', 
// 			'mail',
// 			'cn',
// 		);
// 		$ldapConfiguration->addProperty('login_fields', $loginFields);
// 		
// 		$ldapAuthNMethod =& new LDAPAuthNMethod;
// 		$ldapAuthNMethod->assignConfiguration($ldapConfiguration);
// 		unset($arg0, $arg1, $arg2, $arg3, $arg4, $propertiesFields, $loginFields, $ldapConfiguration);
// 		
// 	$configuration->addProperty($ldapAuthType, $ldapAuthNMethod);
	
	Services::startManagerAsService("AuthNMethodManager", $context, $configuration);
	
	
// :: Agent-Token Mapping Manager ::	
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('database_id', $dbID);
	Services::startManagerAsService("AgentTokenMappingManager", $context, $configuration);


// :: GUIManager setup ::
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('database_index', $dbID);
	$configuration->addProperty('database_name', $dbName);
	$configuration->addProperty('default_theme', new SimpleLinesTheme);
	$configuration->addProperty('character_set', $arg0 = 'utf-8');
	$configuration->addProperty('document_type', $arg1 = 'text/html');
	$configuration->addProperty('document_type_definition', $arg2 = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">');
	unset($arg0, $arg1, $arg2);
	Services::startManagerAsService("GUIManager", $context, $configuration);


// :: Set up language directories ::
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('default_language', $arg0 = 'en_US');
	$configuration->addProperty('applications', $arg1 = array (
		'concerto' => MYDIR.'/main/languages',
		'polyphony'=> POLYPHONY.'/main/languages'
	));
	unset ($arg0, $arg1);
	Services::startManagerAsService("LanguageManager", $context, $configuration);
	

// :: Set up the Authorization System ::
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('database_index', $dbID);
	$configuration->addProperty('database_name', $dbName);
	Services::startManagerAsService("AuthorizationManager", $context, $configuration);


// :: Set up the Sets Manager ::
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('database_index', $dbID);
	Services::startManagerAsService("SetManager", $context, $configuration);

	
// :: Set up the MIME service for sniffing mime types ::
	$configuration =& new ConfigurationProperties;
	Services::startManagerAsService("MIMEManager", $context, $configuration);

	
// :: Set up the ImageProcessor service for generating thumbnails ::
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('thumbnail_format', $arg0 = "image/jpeg");
	$configuration->addProperty('use_gd', $arg1 = FALSE);
	$configuration->addProperty('gd_formats', $arg2 = array());
	$configuration->addProperty('use_imagemagick', $arg3 = TRUE);
	$configuration->addProperty('imagemagick_path', $arg4 = "/usr/X11R6/bin");
	$configuration->addProperty('imagemagick_temp_dir', $arg5 = "/tmp");
	$configuration->addProperty('imagemagick_formats', $arg2 = array());
	unset ($arg0, $arg1, $arg2, $arg3, $arg4, $arg5);
	Services::startManagerAsService("ImageProcessingManager", $context, $configuration);


// :: Set up the Hierarchy Manager ::
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('database_index', $dbID);
	$configuration->addProperty('database_name', $dbName);
	Services::startManagerAsService("HierarchyManager", $context, $configuration);



/*********************************************************
 *
 * ----------------INSTALLER SCRIPT------------------
 *
 * The installer script for Concerto. Uncomment this for 
 * one execute on an empty database to create the default
 * data-set.
 *********************************************************/
//include (MYDIR."/install/dev_install.inc.php");
/*********************************************************/



// :: Set up the DataManager ::
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('database_index', $dbID);
	Services::startManagerAsService("DataManager", $context, $configuration);


// :: Set up the RepositoryManager ::
	$repositoryHierarchyId = "dev_id-1";
	$defaultParentId = "dev_id-3";	
	$configuration =& new ConfigurationProperties;
	$configuration->addProperty('database_index', $dbID);
	$configuration->addProperty('hierarchy_id', $repositoryHierarchyId);
	$configuration->addProperty('default_parent_id', $defaultParentId);
	$configuration->addProperty('version_control_all', $arg2 = TRUE);
	$configuration->addProperty('use_filesystem_for_files', $arg3 = TRUE);
	$configuration->addProperty('file_data_path', $arg4 = MYPATH."/../concerto_data");
	Services::startManagerAsService("RepositoryManager", $context, $configuration);
	unset($arg0, $arg1, $arg2, $arg3, $arg4);
	
/************************************************************************
 * To convert from database Storage of files to filesystem storage,
 * set all of the configuration needed for both except the switch for which
 * system to use. Keep that at its original value. Then uncomment the following
 * lines and set the values to the desired ones.
 */
//  	$idManager =& Services::getService("Id");
//  	$repositoryManagaer =& Services::getService("Repository");
//  	
// 	$destinationRecordClass = "FileSystemFileRecord";
// 	$recordStructureOfBothRecords =& $idManager->getId("FILE");
// 	
// 	$repositoriesToConvert =& $repositoryManagaer->getRepositories();
// 	while ($repositoriesToConvert->hasNextRepository()) {
// 		$repository =& $repositoriesToConvert->nextRepository();
// 		
// 		$repositoryId =& $repository->getId();
// 		print "\n<br/>Converting Repository: ".$repositoryId->getIdString();
// 		
// 		$repository->convertRecords($recordStructureOfBothRecords, $destinationRecordClass);
// 	}
/************************************************************************/




/*********************************************************
 * Authorization Root node
 *********************************************************/
 define("AZ_ROOT_NODE", 'dev_id-2');

/*********************************************************
 * View/Use AZs
 *********************************************************/
// Can this qualifier and its children be accessed?
define("AZ_ACCESS", 'dev_id-7');

// Can a qualifier be viewed?
define("AZ_VIEW", 'dev_id-9');

// Can a qualifier be commented on?
define("AZ_COMMENT", 'dev_id-11');

/*********************************************************
 * Editing AZs
 *********************************************************/
// Can a qualifier be edited?
define("AZ_EDIT", 'dev_id-13');

// Can a qualifier be deleted?
define("AZ_DELETE", 'dev_id-15');

// Can a a child be added to this qualifier?
define("AZ_ADD_CHILDREN", 'dev_id-17');

/*********************************************************
 * Administration AZs
 *********************************************************/
 // Can the AZs of a qualifier be viewed?
define("AZ_VIEW_AZS", 'dev_id-19');

 // Can the AZs of a qualifier be modified?
define("AZ_MODIFY_AZS", 'dev_id-21');

 // Can agents be created here?
define("AZ_CREATE_AGENTS", 'dev_id-23');

 // Can agent properties be modified here?
define("AZ_MODIFY_AGENTS", 'dev_id-25');

 // Can agents be deleted here?
define("AZ_DELETE_AGENTS", 'dev_id-27');

 // Can groups be created here?
define("AZ_CREATE_GROUPS", 'dev_id-29');

 // Can groups properties be modified here?
define("AZ_MODIFY_GROUPS", 'dev_id-31');

 // Can groups be deleted here?
define("AZ_DELETE_GROUPS", 'dev_id-33');

/*********************************************************
 * Hierarchy Ids
 *********************************************************/
 // Digital Repository Id
 define("REPOSITORY_NODE_ID", $defaultParentId);

// print "<pre>";
// print_r($_SESSION);
// print "</pre>";

$repositoryManager =& Services::getService("Repository");
$iterator = $repositoryManager->getRepositoriesByType(new HarmoniType ('System Repositories', 'Concerto', 'Exhibitions',
				       'A Repository for holding Exhibitions, their Slide-Shows and Slides'));
if(!($iterator->hasNextRepository())){
  $t =& new HarmoniType ('System Repositories', 'Concerto', 'Exhibitions',
			 'A Repository for holding Exhibitions, their Slide-Shows and Slides');
  $repository =& $repositoryManager->createRepository(
						      "Exhibitions Repository", "Exhibition",
						      $t);
}
